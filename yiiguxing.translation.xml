<application>
  <component name="AppStorage">
    <option name="newTranslationDialogHeight" value="443" />
    <option name="newTranslationDialogWidth" value="810" />
    <option name="newTranslationDialogX" value="367" />
    <option name="newTranslationDialogY" value="428" />
    <histories>
      <item value="ERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.&#10;rembg 2.0.25 requires scipy==1.7.3, but you have scipy 1.9.2 which is incompatible.&#10;" />
      <item value=" No such file or directory" />
      <item value="input inventory quantity" />
      <item value="画面更新" />
      <item value="generater" />
      <item value="ignore" />
      <item value="extrasaction" />
      <item value="登録" />
      <item value="とうろくん" />
      <item value="regist" />
      <item value="rise" />
      <item value="ＲＩＳＥ" />
      <item value="RISE" />
      <item value="発生" />
      <item value="corporate list" />
      <item value="invoice" />
      <item value="announcement" />
      <item value="announce data" />
      <item value="announce" />
      <item value="resolve" />
      <item value="見出し" />
      <item value="男性" />
      <item value="TODO 5. - If TODO4 percentage is greater than 5 then print(&quot;Get News&quot;)." />
      <item value="TODO 3. - Find the positive difference between 1 and 2. e.g. 40 - 20 = -20, but the positive difference is 20. Hint: https:www.w3schools.compythonref_func_abs.asp" />
      <item value="TODO 1. - Get yesterday's closing stock price. Hint: You can perform list comprehensions on Python dictionaries. e.g. [new_value for (key, value) in dictionary.items()]" />
      <item value="todo 2. - get the day before yesterday's closing stock price" />
      <item value="when stock price increasedecreases by 5% between yesterday and the day before yesterday then print(&quot;get news&quot;)." />
      <item value="When stock price increasedecreases by 5% between yesterday and the day before yesterday then print(&quot;Get News&quot;)." />
      <item value="sunrise" />
      <item value="sunset" />
      <item value="If the ISS is close to my current position and it is currently dark" />
      <item value="If the ISS is close to my current position and it is currently dark Then send me an email to tell me to look up. BONUS: run the code every 60 seconds." />
      <item value="your position is within +5 or -5 degrees of the iss position." />
      <item value="quote" />
      <item value="HINT 3: Use dictionary comprehension to create a dictionary from birthday.csv that is formated like this: birthdays_dict = { (birthday_month, birthday_day): data_row }" />
      <item value="Fill this in!" />
      <item value="2. Check if today matches a birthday in the birthdays.csv HINT 1: Create a tuple from today's month and day using datetime. e.g. today = (today_month, today_day)" />
      <item value="4. Send the letter generated in step 3 to that person's email address. HINT 1: Gmail(smtp.gmail.com), Yahoo(smtp.mail.yahoo.com), Hotmail(smtp.live.com), Outlook(smtp-mail.outlook.com) HINT 2: Remember to call .starttls() HINT 3: Remember to login to your email service with emailpassword. Make sure your security setting is set to allow less secure apps. HINT 4: The message should have the Subject: Happy Birthday then after \n\n The Message Body." />
      <item value="3. If there is a match, pick a random letter (letter_1.txtletter_2.txtletter_3.txt) from letter_templates and replace the [NAME] with the person's actual name from birthdays.csv HINT 1: Think about the relative file path to open each letter. HINT 2: Use the random module to get a number between 1-3 to pick a randome letter. HINT 3: Use the replace() method to replace [NAME] with the actual name. https:www.w3schools.compythonref_string_replace.asp" />
      <item value="HINT 4: Then you could compare and see if today's monthday tuple matches one of the keys in birthday_dict like this: if (today_month, today_day) in birthdays_dict:" />
      <item value="HINT 3: Use dictionary comprehension to create a dictionary from birthday.csv that is formated like this: birthdays_dict = { (birthday_month, birthday_day): data_row } Dictionary comprehension template for pandas DataFrame looks like this: new_dict = {new_key: new_value for (index, data_row) in data.iterrows()} e.g. if the birthdays.csv looked like this: name,email,year,month,day Angela,angela@email.com,1995,12,24 Then the birthdays_dict should look like this: birthdays_dict = { (12, 24): Angela,angela@email.com,1995,12,24 }" />
      <item value="HINT 2: Use pandas to read the birthdays.csv" />
      <item value="Your Name,your own@email.com,today year,today month,today day" />
      <item value="1. Update the birthdays.csv with your friends &amp; family's details. HINT: Make sure one of the entries matches today's date for testing purposes. e.g. name,email,year,month,day YourName,your_own@email.com,today_year,today_month,today_day" />
      <item value="a は登録されていません" />
      <item value="aは登録されていません" />
      <item value="は登録されていません" />
      <item value="と" />
      <item value="登録されていません" />
      <item value="とうろくさ" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="ENGLISH" value="116" />
        <entry key="CORSICAN" value="1" />
        <entry key="JAPANESE" value="117" />
        <entry key="SLOVAK" value="2" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1666083026361" />
  </component>
</application>