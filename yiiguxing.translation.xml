<application>
  <component name="AppStorage">
    <option name="newTranslationDialogWidth" value="598" />
    <option name="newTranslationDialogX" value="367" />
    <option name="newTranslationDialogY" value="487" />
    <histories>
      <item value="Hint 13: Create a function called compare() and pass in the user_score and computer_score. If the computer and user both have the same score, then it's a draw. If the computer has a blackjack (0), then the user loses. If the user has a blackjack (0), then the user wins. If the user_score is over 21, then the user loses. If the computer_score is over 21, then the computer loses. If none of the above, then the player with the highest score wins." />
      <item value="Hint 12: Once the user is done, it's time to let the computer play. The computer should keep drawing cards as long as it has a score less than 17." />
      <item value="Hint 11: The score will need to be rechecked with every new card drawn and the checks in Hint 9 need to be repeated until the game ends." />
      <item value="Hint 10: If the game has not ended, ask the user if they want to draw another card. If yes, then use the deal_card() function to add another card to the user_cards List. If no, then the game has ended." />
      <item value="Hint 9: Call calculate_score(). If the computer or the user has a blackjack (0) or if the user's score is over 21, then the game ends." />
      <item value="Hint 8: Inside calculate_score() check for an 11 (ace). If the score is already over 21, remove the 11 and replace it with a 1. You might need to look up append() and remove()." />
      <item value="Hint 7: Inside calculate_score() check for a blackjack (a hand with only 2 cards: ace + 10) and return 0 instead of the actual score. 0 will represent a blackjack in our game." />
      <item value="Hint 6: Create a function called calculate_score() that takes a List of cards as input and returns the score. Look up the sum() function to help you do this." />
      <item value="Hint 5: Deal the user and computer 2 cards each using deal_card() and append(). user_cards = [] computer_cards = []" />
      <item value="Hint 4: Create a deal_card() function that uses the List below to return a random card. 11 is the Ace. cards = [11, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10]" />
      <item value="Difficulty Normal : Use all Hints below to complete the project. Difficulty Hard : Use only Hints 1, 2, 3 to complete the project. Difficulty Extra Hard : Only use Hints 1 &amp; 2 to complete the project. Difficulty Expert : Only use Hint 1 to complete the project." />
      <item value="decode" />
      <item value="caesar" />
      <item value="encrypt" />
      <item value="wrong" />
      <item value="e.g." />
      <item value="e.g. Type 'yes' if you want to go again. Otherwise type 'no'. If they type 'yes' then ask them for the directiontextshift again and call the caesar() function again? Hint: Try creating a while loop that continues to execute the program if the user types 'yes'." />
      <item value="TODO-4: Can you figure out a way to ask the user if they want to restart the cipher program?" />
      <item value="Can you fix the code to keep the numbersymbolspace when the text is encodeddecoded? e.g. start_text = &quot;meet me at 3&quot; end_text = &quot;•••• •• •• 3&quot;" />
      <item value="TODO-3: What happens if the user enters a numbersymbolspace?" />
      <item value="Try running the program and entering a shift number of 45. Add some code so that the program continues to work even if the user enters a shift number greater than 26. Hint: Think about how you can use the modulus (%)." />
      <item value="TODO-2: What if the user enters a shift that is greater than the number of letters in the alphabet?" />
      <item value="TODO-1: Import and print the logo from art.py when the program starts." />
      <item value="Write your code above this line " />
      <item value="above" />
      <item value="Define a function called paint_calc() so that the code below works." />
      <item value="面積" />
      <item value="面積&#9;" />
      <item value=" Don't change the code below " />
      <item value="Review: Create a function called greet(). Write 3 print statements inside the function. Call the greet() function and run your code." />
      <item value="TODO-5: - If the letter is not in the chosen_word, print out the letter and let them know it's not in the word." />
      <item value="TODO-4: - If the user has entered a letter they've already guessed, print the letter and let them know." />
      <item value="TODO-3: - Import the logo from hangman_art.py and print it at the start of the game." />
      <item value="TODO-2: - Import the stages from hangman_art.py and make this error go away." />
      <item value="TODO-1: - Update the word list to use the 'word_list' from hangman_words.py" />
      <item value="TODO-2: - If guess is not a letter in the chosen_word," />
      <item value="Then reduce 'lives' by 1." />
      <item value="If lives goes down to 0 then the game should stop and it should print &quot;You lose.&quot;" />
      <item value="TODO-3: - print the ASCII art from 'stages' that corresponds to the current number of 'lives' the user has remaining." />
      <item value="6" />
      <item value="TODO-1: - Create a variable called 'lives' to keep track of the number of lives left." />
      <item value="TODO-1: - Use a while loop to let the user guess again. The loop should only stop once the user has guessed all the letters in the chosen_word and 'display' has no more blanks (&quot;_&quot;). Then you can tell the user they've won." />
      <item value="Hint - Don't worry about getting the user to guess the next letter. We'll tackle that in step 3." />
      <item value="TODO-3: - Print 'display' and you should see the guessed letter in the correct position and every other letter replace with &quot;_&quot;." />
      <item value="If the letter at that position matches 'guess' then reveal that letter in the display at that position. e.g. If the user guessed &quot;p&quot; and the chosen word was &quot;apple&quot;, then display should be [&quot;_&quot;, &quot;p&quot;, &quot;p&quot;, &quot;_&quot;, &quot;_&quot;]." />
      <item value="TODO-2: - Loop through each position in the chosen_word;" />
      <item value="So if the chosen_word was &quot;apple&quot;, display should be [&quot;_&quot;, &quot;_&quot;, &quot;_&quot;, &quot;_&quot;, &quot;_&quot;] with 5 &quot;_&quot; representing each letter to guess." />
      <item value="For each letter in the chosen_word, add a &quot;_&quot; to 'display'." />
      <item value="TODO-1: - Create an empty List called display." />
      <item value="TODO-3 - Check if the letter the user guessed (guess) is one of the letters in the chosen_word." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="ENGLISH" value="70" />
        <entry key="BULGARIAN" value="1" />
        <entry key="JAPANESE" value="69" />
        <entry key="SLOVAK" value="2" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1657494114840" />
  </component>
</application>