<application>
  <component name="AppStorage">
    <option name="newTranslationDialogWidth" value="598" />
    <option name="newTranslationDialogX" value="367" />
    <option name="newTranslationDialogY" value="487" />
    <histories>
      <item value="割り算" />
      <item value="わりざ" />
      <item value="かけ算" />
      <item value="引き算" />
      <item value="leap" />
      <item value="le" />
      <item value="lep" />
      <item value="amount" />
      <item value="bid amount" />
      <item value="bids" />
      <item value="HINT: You can call clear() to clear the output in the console." />
      <item value="TODO: Write the function that will allow new countries to be added to the travel_log. " />
      <item value="TODO-2: Call the caesar() function, passing over the 'text', 'shift' and 'direction' values." />
      <item value="TODO-3: Check if the user wanted to encrypt or decrypt the message by checking the 'direction' variable. Then call the correct function based on that 'drection' variable. You should be able to test the code to encrypt AND decrypt a message." />
      <item value="TODO-1: Create a different function called 'decrypt' that takes the 'text' and 'shift' as inputs." />
      <item value="letter" />
      <item value="todo-2: inside the 'encrypt' function, shift each letter of the 'text' forwards in the alphabet by the shift amount and print the encrypted text." />
      <item value="TODO-3: Call the encrypt function and pass in the user inputs. You should be able to test the code and encrypt a message." />
      <item value="TODO-1: Create a function called 'encrypt' that takes the 'text' and 'shift' as inputs." />
      <item value="Write your code above this line " />
      <item value="above" />
      <item value="Define a function called paint_calc() so that the code below works." />
      <item value="面積" />
      <item value="面積&#9;" />
      <item value=" Don't change the code below " />
      <item value="Review: Create a function called greet(). Write 3 print statements inside the function. Call the greet() function and run your code." />
      <item value="TODO-5: - If the letter is not in the chosen_word, print out the letter and let them know it's not in the word." />
      <item value="TODO-4: - If the user has entered a letter they've already guessed, print the letter and let them know." />
      <item value="TODO-3: - Import the logo from hangman_art.py and print it at the start of the game." />
      <item value="TODO-2: - Import the stages from hangman_art.py and make this error go away." />
      <item value="TODO-1: - Update the word list to use the 'word_list' from hangman_words.py" />
      <item value="TODO-2: - If guess is not a letter in the chosen_word," />
      <item value="Then reduce 'lives' by 1." />
      <item value="If lives goes down to 0 then the game should stop and it should print &quot;You lose.&quot;" />
      <item value="TODO-3: - print the ASCII art from 'stages' that corresponds to the current number of 'lives' the user has remaining." />
      <item value="6" />
      <item value="TODO-1: - Create a variable called 'lives' to keep track of the number of lives left." />
      <item value="TODO-1: - Use a while loop to let the user guess again. The loop should only stop once the user has guessed all the letters in the chosen_word and 'display' has no more blanks (&quot;_&quot;). Then you can tell the user they've won." />
      <item value="Hint - Don't worry about getting the user to guess the next letter. We'll tackle that in step 3." />
      <item value="TODO-3: - Print 'display' and you should see the guessed letter in the correct position and every other letter replace with &quot;_&quot;." />
      <item value="If the letter at that position matches 'guess' then reveal that letter in the display at that position. e.g. If the user guessed &quot;p&quot; and the chosen word was &quot;apple&quot;, then display should be [&quot;_&quot;, &quot;p&quot;, &quot;p&quot;, &quot;_&quot;, &quot;_&quot;]." />
      <item value="TODO-2: - Loop through each position in the chosen_word;" />
      <item value="So if the chosen_word was &quot;apple&quot;, display should be [&quot;_&quot;, &quot;_&quot;, &quot;_&quot;, &quot;_&quot;, &quot;_&quot;] with 5 &quot;_&quot; representing each letter to guess." />
      <item value="For each letter in the chosen_word, add a &quot;_&quot; to 'display'." />
      <item value="TODO-1: - Create an empty List called display." />
      <item value="TODO-3 - Check if the letter the user guessed (guess) is one of the letters in the chosen_word." />
      <item value="TODO-2 - Ask the user to guess a letter and assign their answer to a variable called guess. Make guess lowercase." />
      <item value="TODO-1 - Randomly choose a word from the word_list and assign it to a variable called chosen_word." />
      <item value="print(" />
      <item value="nt(" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="ENGLISH" value="49" />
        <entry key="JAPANESE" value="49" />
        <entry key="SLOVAK" value="2" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1657062113291" />
  </component>
</application>